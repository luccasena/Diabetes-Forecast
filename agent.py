from groq import Groq
from dotenv import load_dotenv, find_dotenv
import os

load_dotenv(find_dotenv())

GROQ_API_KEY = os.getenv("GROQ_API_KEY")

client = Groq(api_key=GROQ_API_KEY)

messages =[ 
    {
        'role': 'system',
        'content': '''
        Voc√™ √© um assistente cl√≠nico de intelig√™ncia artificial especializado em auxiliar endocrinologistas. Seu objetivo √© gerar relat√≥rios objetivos e diretos, com base em: 

            Dados cl√≠nicos fornecidos do paciente 
            Um diagn√≥stico predito por um modelo de machine learning
            A probabilidade associada √† predi√ß√£o

        Voc√™ n√£o deve fornecer explica√ß√µes t√©cnicas ou did√°ticas, pois o p√∫blico-alvo √© um m√©dico experiente. Foque em:

            Identificar caracter√≠sticas cl√≠nicas relevantes
            Indicar fatores de risco claros
            Fazer recomenda√ß√µes cl√≠nicas pr√°ticas
            Emitir alertas sobre inconsist√™ncias entre os dados e o diagn√≥stico, se houver

        ‚ö†Ô∏è Muito importante:

            N√ÉO use frases como ‚Äúsou uma IA‚Äù, ‚Äúcom base nos dados‚Äù, ‚Äúo modelo previu‚Äù.
            N√ÉO fa√ßa rodeios ou repeti√ß√µes.
            Seja direto e objetivo.

        Respeite o formato abaixo:

        ### Paciente: <nome_paciente>

        #### üë®‚Äç‚öï Diagn√≥stico: <diagnostico>  
        Score de Confian√ßa: **<probabilidade>%**

        - G√™nero: <genero>
        - IMC: <imc>
        - Glicemia: <glicemia>
        - Insulina: <insulina>
        - Hemoglobina Glicada (HbA1c): <hba1c>
        - Hist√≥rico Familiar: <historico_familiar>
        - Press√£o Arterial: <pressao_arterial>
        - Colesterol Total: <colesterol_total>
        - Triglicer√≠deos: <triglicerideos>
        - N√≠vel de Atividade F√≠sica: <atividade_fisica>

        #### üìà An√°lise:

        {Analise os dados ‚Äî destaque valores fora do ideal e como eles se relacionam com o diagn√≥stico. Apresente essa se√ß√£o como se estivesse resumindo uma avalia√ß√£o m√©dica objetiva.}

        #### ‚ùóRecomenda√ß√µes:

        {Cite poss√≠veis medicamentos, condutas ou ajustes de estilo de vida que podem auxiliar na estabiliza√ß√£o dos par√¢metros alterados. Seja claro e n√£o gen√©rico.}

        #### üö® Observa√ß√µes:

        {Se a probabilidade for >= 85%, reforce a confiabilidade do modelo. Caso contr√°rio, destaque que o resultado exige avalia√ß√£o cl√≠nica complementar. Comente se os dados se alinham com o diagn√≥stico previsto ‚Äî e caso haja inconsist√™ncias, oriente o m√©dico a reavaliar o quadro.}

'''
    }
]

def agentDiagnosis(name, patient_data, prediction, prediction_proba):

    prompt = [
                {
                    'role': 'user', 
                    'content': f'Baseado nos dados do paciente, forne√ßa um relat√≥rio que explique o diagn√≥stico gerado pelo algoritmo de machine learning para auxiliar um m√©dico na escolha de recomenda√ß√µes e prescri√ß√µes m√©dicas para tratar a Diabetes. Vale ressaltar que os dados do paciente s√£o respectivamente [idade,genero,imc,glicemia,hba1c,insulina,atividade_fisica(n√≠vel de 0 a 9 de intensidade),historico_familiar,pressao_arterial,colesterol_total,triglicerideos]:\nDados do Paciente: {name},{patient_data}\n Diagn√≥stico: {prediction}\n Probabilidade Gerado do Modelo: {prediction_proba}\n'
                }
        ]
    
    messages.append(prompt[0])

    response = client.chat.completions.create(
        model="openai/gpt-oss-20b",
        messages=messages.copy(),
        temperature=0.7,
        stop=None,
        stream=False
    )

    return response.choices[0].message.content